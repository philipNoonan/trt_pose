/*
Compute Shader to move rgb8ui images into a float buffer
Author: Philip Noonan (philip.noonan@outlook.com)
Date Created: 10 Feb 2022
*/

#version 430

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding= 0, rgba8ui) readonly uniform uimage2D inputImage;

layout(std430, binding = 0) buffer TensorData
{
    float tensorOutput [];
};

uniform vec2 scale;
uniform ivec2 offset;


void main(void) {
    // CHECK IF OUT OF BOUNDS - PO2 should prevent that but need to check it!
    // each thread reads in one pixel from the large and writes to a separate layer in the hypercube

    ivec2 pix = ivec2(vec2(gl_GlobalInvocationID.xy) * scale) + offset;
    

    vec3 dataVals = vec3(imageLoad(inputImage, pix).xyz);

    tensorOutput[gl_GlobalInvocationID.y * 256 + gl_GlobalInvocationID.x + (0 * 256 * 256)] = ((dataVals.x / 255.0f) - 0.485f) / 0.229f;
    tensorOutput[gl_GlobalInvocationID.y * 256 + gl_GlobalInvocationID.x + (1 * 256 * 256)] = ((dataVals.y / 255.0f) - 0.456f) / 0.224f;
    tensorOutput[gl_GlobalInvocationID.y * 256 + gl_GlobalInvocationID.x + (2 * 256 * 256)] = ((dataVals.z / 255.0f) - 0.406f) / 0.225f;

}